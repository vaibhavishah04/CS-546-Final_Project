<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="/public/css/styles.css" />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      rel="stylesheet"
    />
    <link
      href="https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <title>Sensor Details - NJFloodNet</title>
  </head>

  <body>
    <!-- Include header -->
    <div><%- include('../partials/header'); %></div>

    <header>
      <div class="logo"></div>
      <nav class="navigation">
        <ul>
          <li><a href="/">Map</a></li>
          <li><a href="/dashboard">Dashboard</a></li>
          <li><a href="/reporting">Reporting</a></li>
          <li><a href="/about">About FloodNet</a></li>
        </ul>
      </nav>
    </header>

    <div class="container my-4">
      <h1 class="text-center mb-4">Sensor Details</h1>

      <!-- Display Sensor Information -->
      <% if (sensor) { %>
      <div class="card mb-4">
        <div class="card-header text-center">
          <h3>Sensor <%= sensor.sensorNumber %></h3>
          <p><strong>Location:</strong> <%= sensor.location %></p>
          <p><strong>Status:</strong> <%= sensor.status %></p>
          <p><strong>Coordinates:</strong> <%= sensor.coords %></p>
          <p>
            <strong>Notes:</strong>
            <% if (sensor.notes && sensor.notes.length > 0) { %>
              <ul id="notesList">
                <% sensor.notes.forEach((note) => { %>
                  <li id="note-<%= note._id %>">
                    <strong><%= note.author %>:</strong> <%= note.text %>
                    <span class="note-text"><%= note.text %></span>
                    
                    <small>(<%= new Date(note.timestamp).toLocaleString() %>)</small>
          
                    <!-- Buttons for edit and delete (only for note's author) -->
                    <% if (session.userInfo && note.author === session.userInfo.username) { %>
                      <button 
                        class="btn btn-warning btn-sm edit-note" 
                        data-id="<%= note._id %>" 
                        data-text="<%= note.text %>"
                      >
                        Edit
                      </button>
                      <button 
                        class="btn btn-danger btn-sm delete-note" 
                        data-id="<%= note._id %>"
                      >
                        Delete
                      </button>
                    <% } %>
                  </li>
                <% }); %>
              </ul>
            <% } else { %>
              No notes available.
            <% } %>
          </p>
        </div>
      </div>

      <div class="card mb-4">
        <div class="card-header text-center">
          <h3>Options</h3>
        </div>
        <div class="card-body text-center">
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="startDate" class="form-label">Start Date:</label>
              <input type="date" id="startDate" class="form-control" />
            </div>
            <div class="col-md-6">
              <label for="endDate" class="form-label">End Date:</label>
              <input type="date" id="endDate" class="form-control" />
            </div>
          </div>
          <div class="button-group">
          <button id="filterBtn" class="btn btn-primary">Filter Data</button>
          <button id="downloadBtn" class="btn btn-success ms-3">Download Data</button>
        </div>
        </div>
      </div>

      <!-- Display Sensor Measurements -->
      <div class="card">
        <div class="card-header text-center">
          <h3>Measurement Data</h3>
        </div>
        <div class="card-body">
          <% if (sensor.measurements && sensor.measurements.length > 0) { %>
          <canvas id="distanceChart" class="chart"></canvas>
          <canvas id="rainChart" class="chart mt-4"></canvas>
          <% } else { %>
          <p class="text-center">No measurement data available for this sensor.</p>
          <% } %>
        </div>
      </div>
      <% } else { %>
      <p class="text-center">Sensor not found.</p>
      <% } %>
    </div>

    <div class="card mb-4">
      <div class="card-header text-center">
        <h3>Add Notes</h3>
      </div>
      <div class="card-body text-center">
        <form id="addNoteForm" method="POST" action="/sensors/<%= sensor._id %>/notes">
          <div class="form-group" style="width: 100%;">
            <label for="note" class="form-label"><strong>New Note:</strong></label>
            <textarea
              id="note"
              name="note"
              rows="5"
              style="width: 100%; box-sizing: border-box; resize: vertical;"
              placeholder="Enter your note here..."
              required
            ></textarea>
          </div>
          <div class="form-group" style="width: 100%;">
            <button type="submit" class="btn btn-primary w-100 mt-3">Add Note</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Include footer -->
    <div><%- include('../partials/footer'); %></div>

    <!-- JavaScript for rendering charts -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const filterBtn = document.getElementById("filterBtn");
        const download_btn = document.getElementById("download_btn");

        <% if (sensor && sensor.measurements && sensor.measurements.length > 0) { %>
        const sensorData = <%- JSON.stringify(sensor.measurements) %>;
        const timestamps = sensorData.map((m) => m.timestamp.toString());
        const floodDepths = sensorData.map((m) => m.distanceMm);
        const rainAccumulation = sensorData.map((m) => m.rainAccMm || 0);

        // Distance Chart
        const ctxDistance = document.getElementById("distanceChart").getContext("2d");
        const distanceChart = new Chart(ctxDistance, {
          type: "line",
          data: {
            labels: timestamps,
            datasets: [{ label: "Flood Depth (mm)", data: floodDepths, borderColor: "#3b93bd", backgroundColor: "rgba(0, 123, 255, 0.2)", fill: true }],
          },
          options: { responsive: true },
        });

        // Rain Accumulation Chart
        const ctxRain = document.getElementById("rainChart").getContext("2d");
        const rainChart = new Chart(ctxRain, {
          type: "line",
          data: {
            labels: timestamps,
            datasets: [{ label: "Rain Accumulation (mm)", data: rainAccumulation, borderColor: "green", backgroundColor: "rgba(0, 255, 0, 0.2)", fill: true }],
          },
          options: { responsive: true },
        });

        // Filtering Logic
        filterBtn.addEventListener("click", () => {
          const startDate = new Date(document.getElementById("startDate").value);
          const endDate = new Date(document.getElementById("endDate").value);

          if (!isNaN(startDate) && !isNaN(endDate)) {
            const filteredData = sensorData.filter((m) => {
              const date = new Date(m.timestamp);
              return date >= startDate && date <= endDate;
            });

            const filteredTimestamps = filteredData.map((m) => m.timestamp.toString());
            const filteredFloodDepths = filteredData.map((m) => m.distanceMm);
            const filteredRain = filteredData.map((m) => m.rainAccMm || 0);

            // Update both charts
            distanceChart.data.labels = filteredTimestamps;
            distanceChart.data.datasets[0].data = filteredFloodDepths;
            distanceChart.update();

            rainChart.data.labels = filteredTimestamps;
            rainChart.data.datasets[0].data = filteredRain;
            rainChart.update();
          } else {
            alert("Please select valid start and end dates.");
          }
        });

        // Download Logic
        downloadBtn.addEventListener("click", () => {

          const user = <%- JSON.stringify(user) %>

          if(user){

          let csvContent = "data:text/csv;charset=utf-8,Timestamp,Flood Depth (mm),Rain Accumulation (mm)\n";
          sensorData.forEach((m) => {
            csvContent += `${m.timestamp},${m.distanceMm},${m.rainAccMm || 0}\n`;

          });

          const encodedUri = encodeURI(csvContent);
          const link = document.createElement("a");
          link.setAttribute("href", encodedUri);
          link.setAttribute("download", "sensor_data.csv");
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        }
        else{
          alert("Please sign in to download the data.");
        }
        });
        <% } %>
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const addNoteForm = document.getElementById("addNoteForm");
        const notesList = document.querySelector(".card-header ul") || createNotesList();

        addNoteForm.addEventListener("submit", async (e) => {
          e.preventDefault(); // Prevent the default form submission

          const noteText = document.getElementById("note").value.trim();
          const sensorId = "<%= sensor._id %>"; // Sensor ID passed dynamically

          if (!noteText) {
            alert("Please enter a note.");
            return;
          }

          try {
            const response = await fetch(`/sensors/${sensorId}/notes`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ note: noteText }),
            });

            const result = await response.json();

            if (response.ok) {
              // Add the new note dynamically to the list
              const newNote = document.createElement("li");
              newNote.innerHTML = `
                <strong>${result.author}:</strong> ${result.note}
                <small>(${new Date(result.timestamp).toLocaleString()})</small>
              `;
              notesList.appendChild(newNote);

              document.getElementById("note").value = ""; // Clear the input field
              alert("Note added successfully!");
            } else {
              alert(`Error: ${result.error}`);
            }
          } catch (err) {
            console.error("Error submitting note:", err);
            alert("An error occurred while adding the note. Please check if you are signed in or try again.");
          }
        });

        // Helper function to create a notes list if it doesn't already exist
        function createNotesList() {
          const notesSection = document.querySelector(".card-header");
          const notesList = document.createElement("ul");
          notesSection.appendChild(notesList);
          return notesList;
        }
      });
    </script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sensorId = "<%= sensor._id %>"; // Pass the current sensor ID
  
    // Handle Delete Note
    document.querySelectorAll(".delete-note").forEach((btn) => {
      btn.addEventListener("click", async () => {
        const noteId = btn.getAttribute("data-id");
  
        if (confirm("Are you sure you want to delete this note?")) {
          try {
            const response = await fetch(`/sensors/${sensorId}/notes/${noteId}`, {
              method: "DELETE",
            });
  
            const result = await response.json();
            if (response.ok) {
              document.getElementById(`note-${noteId}`).remove();
              alert("Note deleted successfully!");
            } else {
              alert(`Error: ${result.error}`);
            }
          } catch (err) {
            console.error(`Error deleting note: ${err}`);
            alert("Failed to delete note.");
          }
        }
      });
    });
  
    // Handle Edit Note
    document.querySelectorAll(".edit-note").forEach((btn) => {
      btn.addEventListener("click", async () => {
        const noteId = btn.getAttribute("data-id");
        const currentText = btn.dataset.text;
  
        const newText = prompt("Edit your note:", currentText);
        if (newText && newText.trim() !== currentText) {
          try {
            const response = await fetch(`/sensors/${sensorId}/notes/${noteId}`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ newText: newText.trim() }),
            });
  
            const result = await response.json();
            if (response.ok) {
              const noteElement = document.querySelector(`#note-${noteId} .note-text`);
              noteElement.textContent = newText.trim();
              btn.dataset.text = newText.trim(); // Update data-text
              alert("Note updated successfully!");
            } else {
              alert(`Error: ${result.error}`);
            }
          } catch (err) {
            console.error("Error updating note:", err);
            alert("Failed to update note.");
          }
        }
      });
    });
  });
  </script>
  
  </body>
</html>
