<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="/public/css/styles.css" />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      rel="stylesheet"
    />
    <link
      href="https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <title>Sensor Details - NJFloodNet</title>
  </head>

  <body>
    <!-- Include header -->
    <div><%- include('../partials/header'); %></div>

    <header>
      <div class="logo"></div>
      <nav class="navigation">
        <ul>
          <li><a href="/">Map</a></li>
          <li><a href="/dashboard">Dashboard</a></li>
          <li><a href="/reporting">Reporting</a></li>
          <li><a href="/about">About FloodNet</a></li>
        </ul>
      </nav>
    </header>

    <div class="container my-4">
      <h1 class="text-center mb-4">Sensor Details</h1>

      <!-- Display Sensor Information -->
      <% if (sensor) { %>
        <div class="card mb-4">
          <div class="card-header text-center">
            <h3>Sensor <%= sensor.sensorNumber %>: <%= sensor.sensorName %></h3>
            <p><strong>Location:</strong> <%= sensor.location %></p>
            <p><strong>Status:</strong> <%= sensor.status %></p>
            <p><strong>Coordinates:</strong> <%= sensor.coords %></p>
            <p><strong>Notes:</strong> <%= sensor.notes.length > 0 ? sensor.notes.join(', ') : "No notes available" %></p>
          </div>
          <div class="card-body text-center">
            <img
              src="<%= sensor.image.startsWith('./') ? sensor.image.replace('./', '/public/') : sensor.image %>"
              alt="Sensor Image"
              style="max-width: 100%; height: auto; border-radius: 8px;"
            />
          </div>
        </div>


        <div class="card mb-4">
          <div class="card-header text-center">
            <h3>Options</h3>
          </div>
          <div class="card-body text-center">
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="startDate" class="form-label">Start Date:</label>
                <input type="date" id="startDate" class="form-control" />
              </div>
              <div class="col-md-6">
                <label for="endDate" class="form-label">End Date:</label>
                <input type="date" id="endDate" class="form-control" />
              </div>
            </div>
            <button id="filterBtn" class="btn btn-primary">Filter Data</button>
            <button id="download_data" class="btn btn-success ms-3">Download Data</button>
          </div>
        </div>


        <!-- Display Sensor Measurements -->
        <div class="card">
          <div class="card-header text-center">
            <h3>Measurement Data</h3>
          </div>
          <div class="card-body">
            <% if (sensor.measurements && sensor.measurements.length > 0) { %>
              <canvas id="chart-<%= sensor._id %>" class="chart"></canvas>
            <% } else { %>
              <p class="text-center">No measurement data available for this sensor.</p>
            <% } %>
          </div>
        </div>
      <% } else { %>
        <p class="text-center">Sensor not found.</p>
      <% } %>
    </div>

    <!-- Include footer -->
    <div><%- include('../partials/footer'); %></div>

    <!-- JavaScript for rendering chart -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {

        const filterBtn = document.getElementById("filterBtn");
        const downloadBtn = document.getElementById("downloadBtn");

        <% if (sensor && sensor.measurements && sensor.measurements.length > 0) { %>
          const ctx = document.getElementById("chart-<%= sensor._id %>").getContext("2d");

          // Extract timestamps and flood depths (or other relevant data)
          const timestamps = <%- JSON.stringify(sensor.measurements.map(m => m.timestamp.toString())) %>;
          const floodDepths = <%- JSON.stringify(sensor.measurements.map(m => m.distanceMm)) %>;

         const chart = new Chart(ctx, {
            type: "line",
            data: {
              labels: timestamps,
              datasets: [
                {
                  label: "Flood Depth (mm)",
                  data: floodDepths,
                  borderColor: "#3b93bd",
                  backgroundColor: "rgba(0, 123, 255, 0.2)",
                },
              ],
            },
            options: { responsive: true },
          });

            filterBtn.addEventListener("click", () => {    // Added for chart filter
            const startDate = new Date(document.getElementById("startDate").value);
            const endDate = new Date(document.getElementById("endDate").value);

            if (!isNaN(startDate) && !isNaN(endDate)) {
              const filteredData = measurements.filter(m => {
                const date = new Date(m.timestamp);
                return date >= startDate && date <= endDate;
              });

              const filteredTimestamps = filteredData.map(m => m.timestamp.toString());
              const filteredFloodDepths = filteredData.map(m => m.distanceMm);

              chart.data.labels = filteredTimestamps;  // Added for chart updation after applying the filter
              chart.data.datasets[0].data = filteredFloodDepths;
              chart.update();
            } else {
              alert("Please select valid start and end dates.");
            }
          });

          downloadBtn.addEventListener("click", () => {   // Added to download the data in to the CVS 
            let csvContent = "data:text/csv;charset=utf-8,Timestamp,Flood Depth (mm)\n";
            measurements.forEach(m => {
              csvContent += `${m.timestamp},${m.distanceMm}\n`;
            });

            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "sensor_data.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          });
        <% } %>
      });
    </script>
  </body>
</html>


